/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      gRPC://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { BasePlugin, PluginInternalFiles } from '@opencensus/core';
import * as grpcTypes from 'grpc';
export declare type GrpcModule = typeof grpcTypes;
export declare type SendUnaryDataCallback = (error: grpcTypes.ServiceError, value?: any, trailer?: grpcTypes.Metadata, flags?: grpcTypes.writeFlags) => void;
/** gRPC instrumentation plugin for Opencensus */
export declare class GrpcPlugin extends BasePlugin {
    /**
     * Span grpc attributes
     */
    static readonly ATTRIBUTE_GRPC_KIND: string;
    static readonly ATTRIBUTE_GRPC_METHOD: string;
    static readonly ATTRIBUTE_GRPC_STATUS_CODE: string;
    static readonly ATTRIBUTE_GRPC_ERROR_NAME: string;
    static readonly ATTRIBUTE_GRPC_ERROR_MESSAGE: string;
    protected readonly internalFileList: PluginInternalFiles;
    /** Constructs a new GrpcPlugin instance. */
    constructor();
    /**
     * Patches gRPC incoming and outcoming request functions.
     */
    protected applyPatch(): any;
    /** Unpatches all gRPC patched function. */
    protected applyUnpatch(): void;
    /**
     * Returns a function that patches the gRPC server register function in order
     * to create trace spans for gRPC service methods.
     * @returns function that returns a patch for server.register function
     */
    private getPatchServer();
    /**
     * Handler Unary and Client Stream Calls
     */
    private clientStreamAndUnaryHandler<RequestType, ResponseType>(plugin, rootSpan, call, callback, original, self);
    /**
     * Handler Server Stream and Bidirectional Stream Calls
     */
    private serverStreamAndBidiHandler<RequestType, ResponseType>(plugin, rootSpan, call, original, self);
    /**
     * Returns a function that patches the gRPC makeClientConstructor in order
     * to patch all client methods.
     * @returns  function that returns a patch for makeClientConstructor.
     */
    private getPatchClient();
    /**
     * This function starts a span (child or root) immediately before the
     * client method is invoked, and ends it either in a callback or stream
     * event handler, depending on the method type.
     */
    private getPatchedClientMethods();
    /**
     * This method handels the client remote call
     */
    private makeGrpcClientRemoteCall(original, args, self, plugin);
    /**
     * Gets a metadata form args, creates a new one if not found.
     *
     *  Code snippet inspired by:
     *  https://github.com/GoogleCloudPlatform/cloud-trace-nodejs/blob/src/plugins/plugin-grpc.ts#L96)
     */
    private getMetadata(original, args, span);
    /**
     * Convert Grpc Status to Span Status
     *
     * At this current version of Opencensus Specs they are the same.
     */
    static convertGrpcStatusToSpanStatus(statusCode: grpcTypes.status): number;
}
declare const plugin: GrpcPlugin;
export { plugin };
