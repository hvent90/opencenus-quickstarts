"use strict";
/**
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@opencensus/core");
const shimmer = require("shimmer");
/** MongoDB instrumentation plugin for Opencensus */
class MongoDBPlugin extends core_1.BasePlugin {
    /** Constructs a new MongoDBPlugin instance. */
    constructor(moduleName) {
        super(moduleName);
        this.SERVER_FNS = ['insert', 'update', 'remove', 'auth'];
        this.CURSOR_FNS_FIRST = ['_find', '_getmore'];
        this.SPAN_MONGODB_QUERY_TYPE = 'db.mongodb.query';
    }
    /**
     * Patches MongoDB operations.
     */
    applyPatch() {
        this.logger.debug('Patched MongoDB');
        if (this.moduleExports.Server) {
            this.logger.debug('patching mongodb-core.Server.prototype.command');
            shimmer.wrap(this.moduleExports.Server.prototype, 'command', this.getPatchCommand());
            this.logger.debug('patching mongodb-core.Server.prototype functions:', this.SERVER_FNS);
            shimmer.massWrap([this.moduleExports.Server.prototype], this.SERVER_FNS, this.getPatchQuery());
        }
        if (this.moduleExports.Cursor) {
            this.logger.debug('patching mongodb-core.Cursor.prototype functions:', this.CURSOR_FNS_FIRST);
            shimmer.massWrap([this.moduleExports.Cursor.prototype], this.CURSOR_FNS_FIRST, this.getPatchCursor());
        }
        return this.moduleExports;
    }
    /** Unpatches all MongoDB patched functions. */
    applyUnpatch() {
        shimmer.unwrap(this.moduleExports.Server.prototype, 'command');
        shimmer.massUnwrap(this.moduleExports.Server.prototype, this.SERVER_FNS);
        shimmer.massUnwrap(this.moduleExports.Cursor.prototype, this.CURSOR_FNS_FIRST);
    }
    /** Creates spans for Command operations */
    getPatchCommand() {
        const plugin = this;
        return (original) => {
            return function (ns, command, 
            // tslint:disable-next-line:no-any
            ...args) {
                let resultHandler = args[args.length - 1];
                if (plugin.tracer.currentRootSpan && arguments.length > 0 &&
                    typeof resultHandler === 'function') {
                    let type;
                    if (command.createIndexes) {
                        type = 'createIndexes';
                    }
                    else if (command.findandmodify) {
                        type = 'findAndModify';
                    }
                    else if (command.ismaster) {
                        type = 'isMaster';
                    }
                    else if (command.count) {
                        type = 'count';
                    }
                    else {
                        type = 'command';
                    }
                    const span = plugin.tracer.startChildSpan(ns + '.' + type, plugin.SPAN_MONGODB_QUERY_TYPE);
                    resultHandler = plugin.patchEnd(span, resultHandler);
                }
                return original.apply(this, arguments);
            };
        };
    }
    /** Creates spans for Query operations */
    getPatchQuery() {
        const plugin = this;
        return (original) => {
            // tslint:disable-next-line:no-any
            return function (ns, ...args) {
                let resultHandler = args[args.length - 1];
                if (plugin.tracer.currentRootSpan && arguments.length > 0 &&
                    typeof resultHandler === 'function') {
                    const span = plugin.tracer.startChildSpan(ns + '.query', plugin.SPAN_MONGODB_QUERY_TYPE);
                    resultHandler = plugin.patchEnd(span, resultHandler);
                }
                return original.apply(this, arguments);
            };
        };
    }
    /** Creates spans for Cursor operations */
    getPatchCursor() {
        const plugin = this;
        return (original) => {
            // tslint:disable-next-line:no-any
            return function (...args) {
                let resultHandler = args[0];
                if (plugin.tracer.currentRootSpan && arguments.length > 0 &&
                    typeof resultHandler === 'function') {
                    const span = plugin.tracer.startChildSpan(this.ns + '.cursor', plugin.SPAN_MONGODB_QUERY_TYPE);
                    resultHandler = plugin.patchEnd(span, resultHandler);
                }
                return original.apply(this, arguments);
            };
        };
    }
    /**
     * Ends a created span.
     * @param span The created span to end.
     * @param resultHandler A callback function.
     */
    patchEnd(span, resultHandler) {
        // tslint:disable-next-line:no-any
        return function patchedEnd() {
            span.end();
            return resultHandler.apply(this, arguments);
        };
    }
}
exports.MongoDBPlugin = MongoDBPlugin;
const plugin = new MongoDBPlugin('mongodb');
exports.plugin = plugin;
//# sourceMappingURL=mongodb.js.map